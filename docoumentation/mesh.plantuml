@startuml Mesh
title Thought Experiment:\nHow to store Meshes of arbitrary topology, with defined triangulation, without loss of information.\nThe implementation of importers & exporters for this construct should be easy in applications like: Blender, 3dsMax, Maya, Godot Editor, Unity Editor, Unreal Editor\n Not pictured is the possibility to store many of these buffers indexed.\nVariables can be of arbitrary precision, defined separately.\n'Primitives_Combine' specifies the number of next triangles to be combined into a single face when supported.\nNot represented is the ability for primitives to consist of lines and points. Combining primitives would not be relevant for these.

entity Mesh {
	id: id_string
	--
	name: string
}

entity Vertex {
	index
	--
	x: float
	y: float
	z: float
}

entity Split_Vertex {
	index
	--
	vertex_index: int
}

entity Normal {
	index
	--
	x: float
	y: float
	z: float
}

entity Tangent {
	index
	--
	x: float
	y: float
	z: float
	w: float
}

entity Color {
	index
	--
	r: float
	g: float
	b: float
}

entity UVChannel {
	index
	--
}

entity UV {
	index
	--
	u: float
	v: float
}

entity Primitive {
	index
	--
	default_material: id_string
}

entity Triangle {
	index
	--
	vertex1_index: int
	vertex2_index: int
	vertex3_index: int
}

entity Primitives_Combine {
	index
	--
	combine_triangle_length: int
}

entity Weight_Channel {
	index
	--
}

entity Weight {
	index
	--
	bone_index: int
	weight: float
}

package Blendshapes
{
	entity Blendshape {
		index
		--
		name: string
	}

	entity B_Translation {
		index
		--
		x: float
		y: float
		z: float
	}

	entity B_Normal {
		index
		--
		x: float
		y: float
		z: float
	}

	entity B_Tangent {
		index
		--
		x: float
		y: float
		z: float
		w: float
	}
}

package Extensions
{
	entity Normal_Split_Point {
		index
		--
		vertex_index: int
	}

	entity Normal_Split_Edge {
		index
		--
		vertex1_index: int
		vertex2_index: int
	}

	entity Edge_Crease {
		index
		--
		vertex1_index: int
		vertex2_index: int
		weight: float
	}
}

Mesh *-- Vertex : 1..n
Vertex o-- Split_Vertex : 1..n
Split_Vertex::index ||--|| Normal::index
Split_Vertex::index ||--|| Tangent::index
Split_Vertex::index ||--|| Color::index
Split_Vertex::index ||--|| UV::index : UV per UVChannel

Mesh *-- "1..n" Primitive
Primitive *-- Triangle : 1..n
Primitive *-- Primitives_Combine : 0..n
Triangle o-- Split_Vertex : 3

Mesh *-- "0..n" UVChannel
UVChannel *-- UV : 1..n

Mesh *-- "0..n" Weight_Channel
Weight_Channel *-- Weight : 1..n
Vertex::index ||--|| Weight::index

Mesh *-- "0..n" Blendshape
Blendshape *-- B_Translation : 0..n
Blendshape *-- B_Normal : 0..n
Blendshape *-- B_Tangent : 0..n
B_Translation::index ||--|| Vertex::index
B_Normal::index ||--|| Vertex::index
B_Tangent::index ||--|| Vertex::index

Mesh *-- "0..n" Normal_Split_Point
Normal_Split_Point o-- Vertex : 1

Mesh *-- "0..n" Normal_Split_Edge
Normal_Split_Edge o-- Vertex : 2

Mesh *-- "0..n" Edge_Crease
Edge_Crease o-- Vertex : 2

@enduml
